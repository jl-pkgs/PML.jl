[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PML",
    "section": "",
    "text": "Reference\nPMLV2\n\ncal_Ei_Dijk2021\nphotosynthesis\naerodynamic_conductance\n\nModelCalib\nParam_PMLV2",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "01-calib_site.html",
    "href": "01-calib_site.html",
    "title": "Calibration for site",
    "section": "",
    "text": "1.1 模型参数率定\nCalibrate PMLV2 model using FLUXNET data\nparNames = [\n  :α, :η, :g1, :VCmax25, :VPDmin, :VPDmax, :D0, :kQ, :kA, :S_sls, :fER0 # :hc\n]\n\ntheta, goal, flag = ModelCalib(df, par0, parNames)\ndf_out = PMLV2_sites(df; par=theta2par(theta, parNames))\ndf_out[1:10, :]\n\nIteration =   0, nEvals = 115, Best Cost = -0.52566\nIteration =   1, nEvals = 278, Best Cost = -0.54122\nIteration =   2, nEvals = 473, Best Cost = -0.54122\nIteration =   3, nEvals = 672, Best Cost = -0.54528\nIteration =   4, nEvals = 872, Best Cost = -0.54900\nIteration =   5, nEvals = 1073, Best Cost = -0.56046\nIteration =   6, nEvals = 1263, Best Cost = -0.56097\nIteration =   7, nEvals = 1448, Best Cost = -0.56958\nIteration =   8, nEvals = 1635, Best Cost = -0.57242\nIteration =   9, nEvals = 1832, Best Cost = -0.57700\nIteration =  10, nEvals = 2025, Best Cost = -0.57763\nIteration =  11, nEvals = 2223, Best Cost = -0.57836\nIteration =  12, nEvals = 2419, Best Cost = -0.57941\nIteration =  13, nEvals = 2616, Best Cost = -0.57968\n\n\n10×14 DataFrame\n\n\n\nRow\nET\nGPP\nEc\nEcr\nEca\nEi\nPi\nEs_eq\nEeq\nET_water\nGa\nGc_w\nfval_soil\nEs\n\n\n\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\n0.414697\n0.545709\n0.165042\n0.00883793\n0.156205\n0.0153008\n0.313699\n0.234353\n0.290273\n0.858553\n0.014428\n0.00136352\n1.0\n0.234353\n\n\n2\n0.716772\n1.09093\n0.541877\n0.0233499\n0.518527\n0.0\n0.0\n0.265969\n0.368498\n1.62444\n0.0162197\n0.00222434\n0.657576\n0.174895\n\n\n3\n0.902411\n1.11298\n0.440393\n0.0696786\n0.370714\n0.0893813\n0.877869\n0.372637\n0.576104\n1.31439\n0.0106403\n0.00250303\n1.0\n0.372637\n\n\n4\n1.25377\n1.89176\n0.80629\n0.109563\n0.696727\n0.0168142\n0.130936\n0.430665\n0.741149\n1.8532\n0.0153346\n0.00400455\n1.0\n0.430665\n\n\n5\n1.51155\n2.04539\n0.813452\n0.162363\n0.651089\n0.256732\n1.65602\n0.441369\n0.84345\n1.7751\n0.0147179\n0.00453156\n1.0\n0.441369\n\n\n6\n1.52538\n1.78246\n0.485462\n0.103802\n0.38166\n0.68448\n8.02602\n0.355437\n0.752408\n1.41139\n0.0268158\n0.00464504\n1.0\n0.355437\n\n\n7\n1.92613\n2.66826\n0.889583\n0.285437\n0.604146\n0.579148\n2.99185\n0.457394\n1.06993\n1.78514\n0.0164274\n0.00637722\n1.0\n0.457394\n\n\n8\n2.03736\n2.9364\n0.903795\n0.323217\n0.580577\n0.712139\n4.23086\n0.421428\n1.10398\n1.75211\n0.0181245\n0.00727743\n1.0\n0.421428\n\n\n9\n2.39085\n4.92544\n1.73869\n0.795952\n0.942739\n0.00180662\n0.00669338\n0.650355\n1.90304\n2.80294\n0.0131528\n0.0108613\n1.0\n0.650355\n\n\n10\n2.55767\n4.9414\n1.78719\n0.91494\n0.872252\n0.134092\n0.447158\n0.636383\n2.0679\n2.85248\n0.0152381\n0.0113444\n1.0\n0.636383",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Calibration for site</span>"
    ]
  },
  {
    "objectID": "01-calib_site.html#拟合优度",
    "href": "01-calib_site.html#拟合优度",
    "title": "Calibration for site",
    "section": "1.2 拟合优度",
    "text": "1.2 拟合优度\n\ngof = [\n  (; var=\"ET\", GOF(df.ET_obs, df_out.ET)...),\n  (; var=\"GPP\", GOF(df.GPP_obs, df_out.GPP)...)] |&gt; DataFrame\nDataFrame(gof)\n\n2×10 DataFrame\n\n\n\nRow\nvar\nNSE\nR2\nKGE\nR\nRMSE\nMAE\nbias\nbias_perc\nn_valid\n\n\n\nString\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nInt64\n\n\n\n\n1\nET\n0.615196\n0.617177\n0.713556\n0.785606\n1.34366\n0.993881\n-0.0778958\n-2.59433\n263\n\n\n2\nGPP\n0.544157\n0.620855\n0.468911\n0.787944\n3.30045\n2.62295\n0.63708\n16.9614\n260",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Calibration for site</span>"
    ]
  },
  {
    "objectID": "01-calib_site.html#绘图",
    "href": "01-calib_site.html#绘图",
    "title": "Calibration for site",
    "section": "1.3 绘图",
    "text": "1.3 绘图\n\nusing Plots\ngr(framestyle=:box, titlefontsize=12)\nt = df.date\ninds = 1:46*1\n\nfunction plot_var(var; label=string(var), title=string(var),\n  data=df_out, scale=1, kw...)\n  plot(t[inds], data[inds, var] * scale; label, title, kw...)\nend\nfunction plot_var!(p, var; label=string(var),\n  data=df_out, kw...)\n  plot!(p, t[inds], data[inds, var]; label, kw...)\nend\n\np_et = plot(title=\"ET components (mm/d)\")\nplot_var!(p_et, :Ec)\nplot_var!(p_et, :Es)\nplot_var!(p_et, :Ei)\nplot_var!(p_et, :ETobs; data=df, label=\"ET_obs\", color=:black)\n\np_gpp = plot_var(:GPP; title=\"GPP (gC m-2 d-1)\", label=\"GPP\")\nplot_var!(p_gpp, :GPPobs; data=df, label=\"GPP_obs\", color=:black)\n\nplot(\n  p_et, p_gpp,\n  plot_var(:Eeq; title=\"Eeq (mm/d)\", label=\"Eeq\"),\n  plot_var(:Gc_w; title=\"Conductance (m s-1)\", label=\"Gc\"),\n  plot_var(:fval_soil; title=\"β_soil\", label=\"β_soil\"),\n  plot_var(:VPD; data=df, scale=-1, title=\"-VPD (kPa)\", label=\"-VPD\"),\n  plot_var(:Pi; title=\"P - Ei (mm/d)\"),\n  plot_var(:Es_eq; title=\"Es_eq (mm/d)\"),\n  size=(800, 700),\n  layout=(4, 2),\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Calibration for site</span>"
    ]
  },
  {
    "objectID": "z-index.html",
    "href": "z-index.html",
    "title": "Reference",
    "section": "",
    "text": "DataFrame\nDocstrings for SpatRasters.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#dataframe",
    "href": "z-index.html#dataframe",
    "title": "Reference",
    "section": "",
    "text": "DataFrame &lt;: AbstractDataFrame\nAn AbstractDataFrame that stores a set of named columns.\nThe columns are normally AbstractVectors stored in memory, particularly a Vector, PooledVector or CategoricalVector.\n\nConstructors\nDataFrame(pairs::Pair...; makeunique::Bool=false, copycols::Bool=true)\nDataFrame(pairs::AbstractVector{&lt;:Pair}; makeunique::Bool=false, copycols::Bool=true)\nDataFrame(ds::AbstractDict; copycols::Bool=true)\nDataFrame(; kwargs..., copycols::Bool=true)\n\nDataFrame(table; copycols::Union{Bool, Nothing}=nothing)\nDataFrame(table, names::AbstractVector;\n          makeunique::Bool=false, copycols::Union{Bool, Nothing}=nothing)\nDataFrame(columns::AbstractVecOrMat, names::AbstractVector;\n          makeunique::Bool=false, copycols::Bool=true)\n\nDataFrame(::DataFrameRow; copycols::Bool=true)\nDataFrame(::GroupedDataFrame; copycols::Bool=true, keepkeys::Bool=true)\n\n\nKeyword arguments\n\ncopycols : whether vectors passed as columns should be copied; by default set to true and the vectors are copied; if set to false then the constructor will still copy the passed columns if it is not possible to construct a DataFrame without materializing new columns. Note the copycols=nothing default in the Tables.jl compatible constructor; it is provided as certain input table types may have already made a copy of columns or the columns may otherwise be immutable, in which case columns are not copied by default. To force a copy in such cases, or to get mutable columns from an immutable input table (like Arrow.Table), pass copycols=true explicitly.\nmakeunique : if false (the default), an error will be raised\n\n(note that not all constructors support these keyword arguments)\n\n\nDetails on behavior of different constructors\nIt is allowed to pass a vector of Pairs, a list of Pairs as positional arguments, or a list of keyword arguments. In this case each pair is considered to represent a column name to column value mapping and column name must be a Symbol or string. Alternatively a dictionary can be passed to the constructor in which case its entries are considered to define the column name and column value pairs. If the dictionary is a Dict then column names will be sorted in the returned DataFrame.\nIn all the constructors described above column value can be a vector which is consumed as is or an object of any other type (except AbstractArray). In the latter case the passed value is automatically repeated to fill a new vector of the appropriate length. As a particular rule values stored in a Ref or a 0-dimensional AbstractArray are unwrapped and treated in the same way.\nIt is also allowed to pass a vector of vectors or a matrix as as the first argument. In this case the second argument must be a vector of Symbols or strings specifying column names, or the symbol :auto to generate column names x1, x2, … automatically. Note that in this case if the first argument is a matrix and copycols=false the columns of the created DataFrame will be views of columns the source matrix.\nIf a single positional argument is passed to a DataFrame constructor then it is assumed to be of type that implements the Tables.jl interface using which the returned DataFrame is materialized.\nIf two positional arguments are passed, where the second argument is an AbstractVector, then the first argument is taken to be a table as described in the previous paragraph, and columns names of the resulting data frame are taken from the vector passed as the second positional argument.\nFinally it is allowed to construct a DataFrame from a DataFrameRow or a GroupedDataFrame. In the latter case the keepkeys keyword argument specifies whether the resulting DataFrame should contain the grouping columns of the passed GroupedDataFrame and the order of rows in the result follows the order of groups in the GroupedDataFrame passed.\n\n\nNotes\nThe DataFrame constructor by default copies all columns vectors passed to it. Pass the copycols=false keyword argument (where supported) to reuse vectors without copying them.\nBy default an error will be raised if duplicates in column names are found. Pass makeunique=true keyword argument (where supported) to accept duplicate names, in which case they will be suffixed with _i (i starting at 1 for the first duplicate).\nIf an AbstractRange is passed to a DataFrame constructor as a column it is always collected to a Vector (even if copycols=false). As a general rule AbstractRange values are always materialized to a Vector by all functions in DataFrames.jl before being stored in a DataFrame.\nDataFrame can store only columns that use 1-based indexing. Attempting to store a vector using non-standard indexing raises an error.\nThe DataFrame type is designed to allow column types to vary and to be dynamically changed also after it is constructed. Therefore DataFrames are not type stable. For performance-critical code that requires type-stability either use the functionality provided by select/transform/combine functions, use Tables.columntable and Tables.namedtupleiterator functions, use barrier functions, or provide type assertions to the variables that hold columns extracted from a DataFrame.\nMetadata: this function preserves all table and column-level metadata. As a special case if a GroupedDataFrame is passed then only :note-style metadata from parent of the GroupedDataFrame is preserved.\n\n\nExamples\njulia&gt; DataFrame((a=[1, 2], b=[3, 4])) # Tables.jl table constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      3\n   2 │     2      4\n\njulia&gt; DataFrame([(a=1, b=0), (a=2, b=0)]) # Tables.jl table constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia&gt; DataFrame(\"a\" =&gt; 1:2, \"b\" =&gt; 0) # Pair constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia&gt; DataFrame([:a =&gt; 1:2, :b =&gt; 0]) # vector of Pairs constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia&gt; DataFrame(Dict(:a =&gt; 1:2, :b =&gt; 0)) # dictionary constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia&gt; DataFrame(a=1:2, b=0) # keyword argument constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia&gt; DataFrame([[1, 2], [0, 0]], [:a, :b]) # vector of vectors constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia&gt; DataFrame([1 0; 2 0], :auto) # matrix constructor\n2×2 DataFrame\n Row │ x1     x2\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#gof",
    "href": "z-index.html#gof",
    "title": "Reference",
    "section": "GOF",
    "text": "GOF\n\n\n\n\n\n\nNo documentation found for public symbol.\nHydroTools.GOF is a Function.\n# 1 method for generic function \"GOF\" from HydroTools:\n [1] GOF(obs::AbstractVector{T}, sim::AbstractVector{T}) where T&lt;:Real\n     @ ~/.julia/packages/HydroTools/DJBjN/src/GOF.jl:67",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#modelcalib",
    "href": "z-index.html#modelcalib",
    "title": "Reference",
    "section": "ModelCalib",
    "text": "ModelCalib\n\n\n\n\n\n\nModelCalib(df::AbstractDataFrame, par0::AbstractETParam; \n    IGBPcode=nothing, maxn=2500, of_gof=:NSE, kw...)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#modelcalib_igbps",
    "href": "z-index.html#modelcalib_igbps",
    "title": "Reference",
    "section": "ModelCalib_IGBPs",
    "text": "ModelCalib_IGBPs\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.ModelCalib_IGBPs is a Function.\n# 1 method for generic function \"ModelCalib_IGBPs\" from PenmanMonteithLeuning:\n [1] ModelCalib_IGBPs(data::DataFrames.AbstractDataFrame; parNames, of_gof, maxn)\n     @ ~/work/PML.jl/PML.jl/src/ModelCalib.jl:6",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#pmlv2",
    "href": "z-index.html#pmlv2",
    "title": "Reference",
    "section": "PMLV2",
    "text": "PMLV2\n\n\n\n\n\n\nPMLV2 (Penman–Monteith–Leuning Version 2) Evapotranspiration model\n\nArguments\n\nPrcp : mm/d\nTavg : degC\nRs : W m-2\nRn : W m-2\nVPD : W m-2\nU2 : m/s\nLAI : m2 m-2\nPa : kPa\nCa : ppm, default 380\nΩ : clamping index, default is 1.0\n\n\n\nExamples\n\n\n\nReferences\n\nGan Rong, 2018, Ecohydrology\nZhang Yongqiang, 2019, RSE\nKong Dongdong, 2019, ISPRS\n\nPMLV2(Prcp, Tavg, Rs, Rn, VPD, U2, LAI, Pa, Ca; par=param0, frame=3)\n\n\nNotes\n一个站点的计算。注意，不同植被类型，参数不同。\n\n\nArguments\n\nframe: in 8-days\n\n\n\nArguments\n\nkw: named keyword arguments\n\nr: interm_PML",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#pmlv2_sites",
    "href": "z-index.html#pmlv2_sites",
    "title": "Reference",
    "section": "PMLV2_sites",
    "text": "PMLV2_sites\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.PMLV2_sites is a Function.\n# 1 method for generic function \"PMLV2_sites\" from PenmanMonteithLeuning:\n [1] PMLV2_sites(df::DataFrames.AbstractDataFrame; par, kw...)\n     @ ~/work/PML.jl/PML.jl/src/PMLV2.jl:134",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#parnames",
    "href": "z-index.html#parnames",
    "title": "Reference",
    "section": "ParNames",
    "text": "ParNames\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.ParNames is of type Vector{Symbol}.\n\nSummary\nmutable struct Vector{Symbol}\n\n\nFields\nref  :: MemoryRef{Symbol}\nsize :: Tuple{Int64}\n\n\nSupertype Hierarchy\nVector{Symbol} &lt;: DenseVector{Symbol} &lt;: AbstractVector{Symbol} &lt;: Any",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#param_pmlv2",
    "href": "z-index.html#param_pmlv2",
    "title": "Reference",
    "section": "Param_PMLV2",
    "text": "Param_PMLV2\n\n\n\n\n\n\nstruct Param_PMLV2{FT&lt;:AbstractFloat} &lt;: AbstractETParam{FT}\n\nFields\n\nα::Real: initial slope of the light response curve to assimilation rate, (i.e., quantum efficiency; μmol CO2 [μmol PAR]⁻¹)` Default: 0.06\nη::Real: initial slope of the CO2 response curve to assimilation rate, (i.e., carboxylation efficiency; μmol m⁻² s⁻¹ [μmol m⁻² s⁻¹]⁻¹) Default: 0.04\ng1::Real: stomatal conductance coefficient, μmol m⁻² s⁻¹ Default: 10.0\nVCmax25::Real: carbon saturated rate of photosynthesis at 25 °C, μmol m⁻² s⁻¹ Default: 50.0\nVPDmin::Real: parameter to constrain gc, kPa Default: 0.9\nVPDmax::Real: parameter to constrain gc, kPa Default: 4.0\nD0::Real: 水汽压参数 Default: 0.7\nkQ::Real: extinction coefficients for visible radiation Default: 0.45\nkA::Real: extinction coefficients for available energy Default: 0.7\nS_sls::Real: Specific leaf storage, van Dijk, A.I.J.M, 2001, Eq2 Default: 0.1\nfER0::Real: Canopy cover fraction related parameter Default: 0.1\nhc::Real: canopy height, [m] Default: 1.0\nd_pc::Real: photoperiod constraint Default: 2.0\n_hc::Vector{FT} where FT&lt;:Real: Default: [1.0, 1.0, 1.0]\n_η::Vector{FT} where FT&lt;:Real: Default: [0.04, 0.04, 0.04]\n_α::Vector{FT} where FT&lt;:Real: Default: [0.06, 0.06, 0.06]\n_g1::Vector{FT} where FT&lt;:Real: Default: [10.0, 10.0, 10.0]\n_VCmax25::Vector{FT} where FT&lt;:Real: Default: [50.0, 50.0, 50.0]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#penmanmonteithleuning",
    "href": "z-index.html#penmanmonteithleuning",
    "title": "Reference",
    "section": "PenmanMonteithLeuning",
    "text": "PenmanMonteithLeuning\n\n\n\n\n\n\nNo docstring found for public module PenmanMonteithLeuning.\n\nPublic names\nDataFrame, GOF, ModelCalib, ModelCalib_IGBPs, PMLV2, PMLV2_sites, ParNames, Param_PMLV2, T_adjust_Vm25, aerodynamic_conductance, bounds, cal_Ei_Dijk2021, f_VPD_Zhang2019, file_FLUXNET_CRO, file_FLUXNET_CRO_USTwt, fread, fwrite, getDataType, get_bounds, hc_raw, interm_PML, map_df_tuple, melt_list, model_goal, model_gof, movmean2, nanmean2, output_PML, par0, photosynthesis, round2, select_param, theta0, theta2par, theta2param, to_mat\n\n\nDisplaying contents of readme found at /home/runner/work/PML.jl/PML.jl/README.md\n\n\nPenman-Monteith-Leuning (PML) Evapotranspiration in Julia\n   \n\nTODO\n\n冠层结构\n\n大叶模型\n双大叶模型\n双叶模型\n多层树冠模型\n\n\n\n模型结构\n\n单独率定GPP\n小时尺度模型构建，解析蒸发信号\n土壤水限制方案\n\n\n\n模型表现\n\n1. 检查PMLV2敏感性参数\n2. 测试LAI除噪的效果\n3. 双生长季，WIP\n4. C3/C4",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#t_adjust_vm25",
    "href": "z-index.html#t_adjust_vm25",
    "title": "Reference",
    "section": "T_adjust_Vm25",
    "text": "T_adjust_Vm25\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.T_adjust_Vm25 is a Function.\n# 1 method for generic function \"T_adjust_Vm25\" from PenmanMonteithLeuning:\n [1] T_adjust_Vm25(Tavg::T) where T&lt;:Real\n     @ ~/work/PML.jl/PML.jl/src/photosynthesis.jl:47",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#aerodynamic_conductance",
    "href": "z-index.html#aerodynamic_conductance",
    "title": "Reference",
    "section": "aerodynamic_conductance",
    "text": "aerodynamic_conductance\n\n\n\n\n\n\naerodynamic_conductance(U2, hc)\n\nArguments\n\nU2: wind speed at 2m\nhc: canopy height\n\n\n\nReturn\n\nGa: aerodynamic conductance in m/s",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#bounds",
    "href": "z-index.html#bounds",
    "title": "Reference",
    "section": "bounds",
    "text": "bounds\n\n\n\n\n\n\nNo documentation found for private symbol.\nFieldMetadata.bounds is a Function.\n# 27 methods for generic function \"bounds\" from FieldMetadata:\n  [1] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:α}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n  [2] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:_g1}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n  [3] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:g1}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n  [4] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:kA}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n  [5] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:VPDmin}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n  [6] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:D0}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n  [7] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:_hc}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n  [8] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:kQ}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n  [9] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:VPDmax}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [10] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:d_pc}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [11] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:_α}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [12] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:_VCmax25}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [13] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:S_sls}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [14] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:fER0}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [15] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:_η}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [16] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:hc}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [17] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:η}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [18] bounds(::Type{&lt;:Param_PMLV2}, ::Type{Val{:VCmax25}})\n     @ PenmanMonteithLeuning ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:214\n [19] bounds(::Type{var\"#214#X\"}, keys::Tuple{}) where var\"#214#X\"\n     @ ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:66\n [20] bounds(::Type{var\"#211#X\"}, keys::Tuple) where var\"#211#X\"\n     @ ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:64\n [21] bounds(x::Type, key::Type)\n     @ ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:56\n [22] bounds(::Type{var\"#204#X\"}, key::Symbol) where var\"#204#X\"\n     @ ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:59\n [23] bounds(x::Type{var\"#208#X\"}) where var\"#208#X\"\n     @ ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:63\n [24] bounds(::var\"#198#X\", key::Symbol) where var\"#198#X\"\n     @ ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:57\n [25] bounds(::var\"#201#X\", key::Type) where var\"#201#X\"\n     @ ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:58\n [26] bounds(x, key)\n     @ ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:55\n [27] bounds(::var\"#206#X\") where var\"#206#X\"\n     @ ~/.julia/packages/FieldMetadata/oeQwS/src/FieldMetadata.jl:62",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#cal_ei_dijk2021",
    "href": "z-index.html#cal_ei_dijk2021",
    "title": "Reference",
    "section": "cal_Ei_Dijk2021",
    "text": "cal_Ei_Dijk2021\n\n\n\n\n\n\ncal_Ei_Dijk2021(Prcp::T, LAI::T, par::Param_PMLV2) where {T&lt;:Real}\n\nReferences\n\nvan Dijk, A.I.J.M, 2001, Eq2.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#f_vpd_zhang2019",
    "href": "z-index.html#f_vpd_zhang2019",
    "title": "Reference",
    "section": "f_VPD_Zhang2019",
    "text": "f_VPD_Zhang2019\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.f_VPD_Zhang2019 is a Function.\n# 1 method for generic function \"f_VPD_Zhang2019\" from PenmanMonteithLeuning:\n [1] f_VPD_Zhang2019(VPD::T, par::Param_PMLV2) where T&lt;:Real\n     @ ~/work/PML.jl/PML.jl/src/water_constrain.jl:2",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#file_fluxnet_cro",
    "href": "z-index.html#file_fluxnet_cro",
    "title": "Reference",
    "section": "file_FLUXNET_CRO",
    "text": "file_FLUXNET_CRO\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.file_FLUXNET_CRO is of type String.\n\nSummary\nmutable struct String\n\n\nSupertype Hierarchy\nString &lt;: AbstractString &lt;: Any",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#file_fluxnet_cro_ustwt",
    "href": "z-index.html#file_fluxnet_cro_ustwt",
    "title": "Reference",
    "section": "file_FLUXNET_CRO_USTwt",
    "text": "file_FLUXNET_CRO_USTwt\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.file_FLUXNET_CRO_USTwt is of type String.\n\nSummary\nmutable struct String\n\n\nSupertype Hierarchy\nString &lt;: AbstractString &lt;: Any",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#fread",
    "href": "z-index.html#fread",
    "title": "Reference",
    "section": "fread",
    "text": "fread\n\n\n\n\n\n\nfread(file::AbstractString; header=true, kw...)\n\nArguments\n\nfile: the csv file to read\nheader: whether the csv file has header?\nkw: other parameters for CSV.File\n\n\n\nExamaple\nfread(\"a.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#fwrite",
    "href": "z-index.html#fwrite",
    "title": "Reference",
    "section": "fwrite",
    "text": "fwrite\n\n\n\n\n\n\nfwrite(df, file; kw...)\ndf = DataFrame(A=1:3, B=4:6, C=7:9)\nfwrite(df, \"a.csv\")\nfwrite(df, \"a.csv\", append=true)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#getdatatype",
    "href": "z-index.html#getdatatype",
    "title": "Reference",
    "section": "getDataType",
    "text": "getDataType\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.getDataType is a Function.\n# 1 method for generic function \"getDataType\" from PenmanMonteithLeuning:\n [1] getDataType(x)\n     @ ~/work/PML.jl/PML.jl/src/utilize.jl:42",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#get_bounds",
    "href": "z-index.html#get_bounds",
    "title": "Reference",
    "section": "get_bounds",
    "text": "get_bounds\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.get_bounds is a Function.\n# 2 methods for generic function \"get_bounds\" from PenmanMonteithLeuning:\n [1] get_bounds(parNames::Vector{Symbol})\n     @ ~/work/PML.jl/PML.jl/src/Parameter.jl:65\n [2] get_bounds()\n     @ ~/work/PML.jl/PML.jl/src/Parameter.jl:65",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#hc_raw",
    "href": "z-index.html#hc_raw",
    "title": "Reference",
    "section": "hc_raw",
    "text": "hc_raw\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.hc_raw is of type Vector{Float64}.\n\nSummary\nmutable struct Vector{Float64}\n\n\nFields\nref  :: MemoryRef{Float64}\nsize :: Tuple{Int64}\n\n\nSupertype Hierarchy\nVector{Float64} &lt;: DenseVector{Float64} &lt;: AbstractVector{Float64} &lt;: Any",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#interm_pml",
    "href": "z-index.html#interm_pml",
    "title": "Reference",
    "section": "interm_PML",
    "text": "interm_PML\n\n\n\n\n\n\nNo documentation found for public symbol.\n\nSummary\nmutable struct interm_PML{T}\n\n\nFields\nET        :: T\nGPP       :: T\nEc        :: T\nEcr       :: T\nEca       :: T\nEi        :: T\nPi        :: T\nEs_eq     :: T\nEeq       :: T\nET_water  :: T\nGa        :: T\nGc_w      :: T\nfval_soil :: T\nEs        :: T",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#map_df_tuple",
    "href": "z-index.html#map_df_tuple",
    "title": "Reference",
    "section": "map_df_tuple",
    "text": "map_df_tuple\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.map_df_tuple is a Function.\n# 1 method for generic function \"map_df_tuple\" from PenmanMonteithLeuning:\n [1] map_df_tuple(fun::Function, lst::DataFrames.GroupedDataFrame{DataFrame}, args...; kw...)\n     @ ~/work/PML.jl/PML.jl/src/utilize.jl:62",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#melt_list",
    "href": "z-index.html#melt_list",
    "title": "Reference",
    "section": "melt_list",
    "text": "melt_list\n\n\n\n\n\n\nmelt_list(list; deepcopy=false, kw...)\n\nArguments\n\nlist: list of DataFrames\n\n\n\nExamples\nd = data.table(; x=1, y=2)\nl = [d, d, d, d]\n\nr1 = melt_list(l, id=1:4) # id all is 4\nr2 = melt_list(l, id=1:4, deepcopy=true)\n\nmelt_list(l; a = 1, b = 2)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#model_goal",
    "href": "z-index.html#model_goal",
    "title": "Reference",
    "section": "model_goal",
    "text": "model_goal\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.model_goal is a Function.\n# 1 method for generic function \"model_goal\" from PenmanMonteithLeuning:\n [1] model_goal(df, theta, parNames; IGBPcode, of_gof, verbose)\n     @ ~/work/PML.jl/PML.jl/src/ModelCalib.jl:54",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#model_gof",
    "href": "z-index.html#model_gof",
    "title": "Reference",
    "section": "model_gof",
    "text": "model_gof\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.model_gof is a Function.\n# 1 method for generic function \"model_gof\" from PenmanMonteithLeuning:\n [1] model_gof(df_out::DataFrame; all)\n     @ ~/work/PML.jl/PML.jl/src/ModelCalib.jl:80",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#movmean2",
    "href": "z-index.html#movmean2",
    "title": "Reference",
    "section": "movmean2",
    "text": "movmean2\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.movmean2 is a Function.\n# 2 methods for generic function \"movmean2\" from PenmanMonteithLeuning:\n [1] movmean2(y::AbstractVector{T}, win_left::Integer, win_right::Integer) where T&lt;:Real\n     @ ~/work/PML.jl/PML.jl/src/utilize.jl:10\n [2] movmean2(y::AbstractVector{T}, win_left::Integer) where T&lt;:Real\n     @ ~/work/PML.jl/PML.jl/src/utilize.jl:10",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#nanmean2",
    "href": "z-index.html#nanmean2",
    "title": "Reference",
    "section": "nanmean2",
    "text": "nanmean2\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.nanmean2 is a Function.\n# 1 method for generic function \"nanmean2\" from PenmanMonteithLeuning:\n [1] nanmean2(x::T1, y::T2) where {T1&lt;:Real, T2&lt;:Real}\n     @ ~/work/PML.jl/PML.jl/src/utilize.jl:30",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#output_pml",
    "href": "z-index.html#output_pml",
    "title": "Reference",
    "section": "output_PML",
    "text": "output_PML\n\n\n\n\n\n\nNo documentation found for public symbol.\n\nSummary\nmutable struct output_PML{T}\n\n\nFields\nn         :: Integer\nET        :: Array{T, 1}\nGPP       :: Array{T, 1}\nEc        :: Array{T, 1}\nEcr       :: Array{T, 1}\nEca       :: Array{T, 1}\nEi        :: Array{T, 1}\nPi        :: Array{T, 1}\nEs_eq     :: Array{T, 1}\nEeq       :: Array{T, 1}\nET_water  :: Array{T, 1}\nGa        :: Array{T, 1}\nGc_w      :: Array{T, 1}\nfval_soil :: Array{T, 1}\nEs        :: Array{T, 1}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#par0",
    "href": "z-index.html#par0",
    "title": "Reference",
    "section": "par0",
    "text": "par0\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.par0 is of type Param_PMLV2{Float64}.\n\nSummary\nmutable struct Param_PMLV2{Float64}\n\n\nFields\nα        :: Float64\nη        :: Float64\ng1       :: Float64\nVCmax25  :: Float64\nVPDmin   :: Float64\nVPDmax   :: Float64\nD0       :: Float64\nkQ       :: Float64\nkA       :: Float64\nS_sls    :: Float64\nfER0     :: Float64\nhc       :: Float64\nd_pc     :: Float64\n_hc      :: Vector{Float64}\n_η       :: Vector{Float64}\n_α       :: Vector{Float64}\n_g1      :: Vector{Float64}\n_VCmax25 :: Vector{Float64}\n\n\nSupertype Hierarchy\nParam_PMLV2{Float64} &lt;: PenmanMonteithLeuning.AbstractETParam{Float64} &lt;: Any",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#photosynthesis",
    "href": "z-index.html#photosynthesis",
    "title": "Reference",
    "section": "photosynthesis",
    "text": "photosynthesis\n\n\n\n\n\n\nphotosynthesis(Tavg::T, Rs::T, VPD::T, LAI::T, Ca=380.0; par)\n\nExample\n# GPP, Gc_w = photosynthesis(Tavg, Rs, VPD, LAI, Ca; par)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#round2",
    "href": "z-index.html#round2",
    "title": "Reference",
    "section": "round2",
    "text": "round2\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.round2 is a Function.\n# 2 methods for generic function \"round2\" from PenmanMonteithLeuning:\n [1] round2(x::NamedTuple, digits; kw...)\n     @ ~/work/PML.jl/PML.jl/src/utilize.jl:7\n [2] round2(x::NamedTuple; ...)\n     @ ~/work/PML.jl/PML.jl/src/utilize.jl:7",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#select_param",
    "href": "z-index.html#select_param",
    "title": "Reference",
    "section": "select_param",
    "text": "select_param\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.select_param is a Function.\n# 1 method for generic function \"select_param\" from PenmanMonteithLeuning:\n [1] select_param(par::PenmanMonteithLeuning.AbstractETParam, parNames)\n     @ ~/work/PML.jl/PML.jl/src/Parameter.jl:91",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#theta0",
    "href": "z-index.html#theta0",
    "title": "Reference",
    "section": "theta0",
    "text": "theta0\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.theta0 is of type Vector{Any}.\n\nSummary\nmutable struct Vector{Any}\n\n\nFields\nref  :: MemoryRef{Any}\nsize :: Tuple{Int64}\n\n\nSupertype Hierarchy\nVector{Any} &lt;: DenseVector{Any} &lt;: AbstractVector{Any} &lt;: Any",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#theta2par",
    "href": "z-index.html#theta2par",
    "title": "Reference",
    "section": "theta2par",
    "text": "theta2par\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.theta2par is a Function.\n# 1 method for generic function \"theta2par\" from PenmanMonteithLeuning:\n [1] theta2par(theta::Vector, parNames::Vector{Symbol})\n     @ ~/work/PML.jl/PML.jl/src/Parameter.jl:87",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#theta2param",
    "href": "z-index.html#theta2param",
    "title": "Reference",
    "section": "theta2param",
    "text": "theta2param\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.theta2param is a Function.\n# 1 method for generic function \"theta2param\" from PenmanMonteithLeuning:\n [1] theta2param(params::Array{Vector{T}, 1}, IGBPs) where T&lt;:Real\n     @ ~/work/PML.jl/PML.jl/src/Parameter.jl:102",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "z-index.html#to_mat",
    "href": "z-index.html#to_mat",
    "title": "Reference",
    "section": "to_mat",
    "text": "to_mat\n\n\n\n\n\n\nNo documentation found for public symbol.\nPenmanMonteithLeuning.to_mat is a Function.\n# 1 method for generic function \"to_mat\" from PenmanMonteithLeuning:\n [1] to_mat(res::output_PML{T}) where T&lt;:Real\n     @ ~/work/PML.jl/PML.jl/src/DataType.jl:70",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reference</span>"
    ]
  }
]